/* global BigInt */
import { useState } from "react";
import * as mui from '@mui/material';
import './Login.css';
import { Navigate, useNavigate } from "react-router-dom"
import config from "./config.json"
import {decryptStringAES, encryptStringAES, hashPassword} from "./utils"
// import * as CryptoJS from 'crypto-js';
import { diffieHellman } from "./Login";
import { useCookies } from "react-cookie";

function Register() {
  const [userValue, setUserValue] = useState("")
  const [firstNameValue, setFirstValue] = useState("")
  const [lastNameValue, setLastValue] = useState("")
  const [login, setLogin] = useState(false)
  const [password, setPassword] = useState("")
  const [cookies, setCookie] = useCookies(["auth_session", "user_session", "token"])
  const [dh_error, setDHError] = useState(false)
  const navigate = useNavigate()

  const auth_g = 5n
  //4096 bit prime generated by 2ton.com.au/safeprimes/
  const auth_p = 577891979226697945570213780521809426563365791435615832711012378975984090706711917615938495479321251358605416479067241081499497036839950356312625597915929364713575346541675959839159009416370898443127459344409878709845697518679122868962118907715571007000916180621970149148136229013170679223203460365617450421691941273835363116508991034178359390084708401581953959008754168771552735521904480713439940947226031866986121762340975621049253684451435399030266860183064954357336799400350480461284469165141631413805707145204708837559352239067360772939965058210616259303108609951008480806667347855751672593239289058012594718617219786601449982343198203231748683266822819073665711182271257734849627858310345536879821077935399795186538030449767160405711762844960031523239541898481869878913445358646928023166940768223088754414136964463018749469689652124543359528248272704783756259254408405133060554006685687358333240561439885337656631093448524482764852413691768290115225854434316473796757712296260976691154626491990747850785649812567977965618087169928752768736500994467612790526523884398574478437931941918120157206366766875928558302834507669957053069399504813957691091119203137043900000222354063927513406469713721166441337402223171582540462531999967n;

  function generate_guid() {
    let dt = new Date().getTime();
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
      function (c) {
        var rnd = Math.random() * 16;
        rnd = (dt + rnd) % 16 | 0;
        dt = Math.floor(dt / 16);
        return (c === 'x' ? rnd : (rnd & 0x3 | 0x8)).toString(16);
      });
  }

  async function checkPasswordValidity(password) {
    var upperCaseRegex = /[A-Z]/;
    var numberRegex = /\d/;
    var specialCharacterRegex = /[^A-Za-z0-9]/;
    return (upperCaseRegex.test(password) && numberRegex.test(password) && specialCharacterRegex.test(password));
  }

  async function postLogin(userID, key) {
    let resp;
    const hashpwd  = await hashPassword(password);
    const jsonObject = {
      user_id: userID,
      username: userValue,
      password: hashpwd
    };

    const [encrypteddata, iv] = await encryptStringAES(jsonObject, key)
    console.log("iv: ", iv)
    console.log("ec: ", encrypteddata)
    try {
      resp = await fetch(`${config.login_host}/login`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          "iv": iv,
          "encrypted_data": encrypteddata,
        }),
      })
      if (resp.status === 404) {
        resp.json().then(function (result) {
          alert("ON postLogin()\n"+ result.message)
        })
      }
    } catch (e) { alert("ON postLogin()" + e.message) }
    return resp.status;
  }

  async function postAuth(user, key) {
    let resp;
    const hashpwd  = await hashPassword(password);
    const jsonObject = {
      username: user,
      password: hashpwd,
      time: Math.floor(Date.now() / 1000)
    };
    console.log("In registerjs")
    
    const [encrypteddata, iv] = await encryptStringAES(jsonObject, key)
    try {
      resp = await fetch(`${config.login_host}/auth`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          "iv": iv,
          "encrypted_data": encrypteddata,
        }),
      });
      if (resp.status === 200) {
        const data = await resp.json();
        const decryptedToken = await decryptStringAES(data.token, data.iv, key);
        console.log("Decrypted Token: ", decryptedToken);
        const parts = decryptedToken.split('|');
        let timestamp = parts[5]
        timestamp += 2* 60 * 60 * 1000;
        let exp = new Date();
        exp.setTime(timestamp);
        setCookie("token", decryptedToken, {expires:exp})
      }else if (resp.status === 401) {
        resp.json().then(function (result) {
          alert("ON postAuth()\n"+result.message)
        })
      }
    } catch (e) { alert("ON postAuth()\n" + e.message)}
    return resp;
  }

  const postRequest = (userID, key) => {
    (async () => {
      const obj = {
            "user_id": userID,
            "username": userValue,
            "first_name": firstNameValue,
            "last_name": lastNameValue,
            "post_ids": [],
            "comment_ids": [],
            "user_group": "normal"
          };
    const [encrypteddata, iv] = await encryptStringAES(obj, key)
      try {
        await fetch(`${config.user_host}/users`, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            "iv": iv,
            "encrypted_data": encrypteddata,
          }),
        });
      } catch (e) {
        alert(e);
      }
    })();
  }

  const postRequestAdmin = (userID) => {
    (async () => {
      try {
        await fetch(`${config.user_host}/users`, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            "user_id": userID,
            "username": userValue,
            "first_name": firstNameValue,
            "last_name": lastNameValue,
            "post_ids": [],
            "comment_ids": [],
            "user_group": "admin"  //Change between mod/admin for testing
          }),
        });
      } catch (e) {
        alert(e.message);
      }
    })();
  }

  const posts = () => {
    (async () => {
      let key = await cookies.auth_session
      if (key===undefined) {
        console.log("no key detected.")
        key = await diffieHellman(`${config.login_host}/key-exchange`, auth_g, auth_p)
        setCookie("auth_session", key, { maxAge:720, path:"/" })
      }
      
      if (key!==undefined && key!==null) {
        const new_userID = generate_guid();
      
        postLogin(new_userID, key).then(res => {if (res!==404) {
          postRequest(new_userID, key) //Change back to admin request for groups testing

          postAuth(userValue, key).then(res => res.json().then(function(result) {
            try {
              fetch(`${config.user_host}/users/` + result.token.user_id, {
                method: 'GET',
              }).then(res => res.json()).then(data => {
                // let rA = CryptoJS.AES.decrypt(data.read_access, key) ? "read/" : ""
                // let pA = CryptoJS.AES.decrypt(data.post_access, key) ? "post/" : ""
                // let cA = CryptoJS.AES.decrypt(data.comment_access, key) ? "comment/" : ""
                // let mA = CryptoJS.AES.decrypt(data.media_access, key) ? "media" : ""
              //let exp = new Date();
              //let time = exp.getTime();
              //time += 2* 60 * 60 * 1000; //Sets token to expire after 2 hours
              //exp.setTime(time);
             // let tokenString = result.token.user_id + "/" + rA + pA + cA + mA
              //document.cookie = 'token=' + tokenString + "; " +
                //'expires=' + exp.toUTCString() + "; "
                // '; path=/';
              setLogin(true)
              })
            } catch(e) {alert("ON posts()\n" + e.message)}
          }))
        }})
      } else {
        setDHError(true)
      }
    })();
  }

  if (login) {
    navigate(0)
    return <Navigate replace to="/dashboard" />;
  } else {
    if (dh_error) {
      return (
        <div className='App'>
          <mui.Box
            sx={{
              width: 400,
              height: 400,
              color: 'text.main',
              borderColor: 'primary.main',
              border: 2,
              borderRadius: 2,
              position: 'absolute',
              top: 160,
              left: '35%'
            }}>

            <div className="Title">
              Warning
            </div>

            <div className='Info'>
              <p>Key exchange have failed.<br></br><br></br>
                Please clear cookies and refresh the page.</p>
            </div>

          </mui.Box>
        </div>
      );
    }
    return (
      <div className="App">
        <mui.Box
          sx={{
            width: 400,
            height: 400,
            color: 'text.main',
            borderColor: 'primary.main',
            border: 2,
            borderRadius: 2,
            position: 'absolute',
            top: 160,
            left: '35%'
          }}>

          <div className="Title">
            Register
          </div>

          <div className="Name-label">
            <mui.TextField
              label="First Name"
              id="firstname"
              placeholder="Type your first name"
              variant="filled"
              size="small"
              style={{ maxWidth: '150px', maxHeight: '50px', minWidth: '150px', minHeight: '50px' }}
              onChange={(firstNameValue) => setFirstValue(firstNameValue.target.value)}
            />
            <mui.TextField
              label="Last Name"
              id="lastname"
              placeholder="Type your last name"
              variant="filled"
              size="small"
              style={{ maxWidth: '150px', maxHeight: '50px', minWidth: '150px', minHeight: '50px' }}
              onChange={(lastNameValue) => setLastValue(lastNameValue.target.value)}
            />
          </div>

          <div className="Username-label">
            <mui.TextField
              label="Username"
              id="username"
              placeholder="Type your username"
              variant="filled"
              size="small"
              style={{ maxWidth: '300px', maxHeight: '50px', minWidth: '300px', minHeight: '50px' }}
              onChange={(userValue) => setUserValue(userValue.target.value)}
            />
          </div>

          
          <div className="Password-label">
            <mui.TextField
              label="Password"
              id="password"
              defaultValue="Type your password"
              variant="filled"
              size="small"
              style={{maxWidth: '300px', maxHeight: '60px', minWidth: '300px', minHeight: '60px'}}
              onChange={(password) => setPassword(password.target.value)}
            />
          </div>

          <div className="Submit">
            <mui.Button variant="contained" onClick={() => { posts() }}
              style={{
                maxWidth: '300px', maxHeight: '30px', minWidth: '300px', minHeight: '30px',
                background: 'linear-gradient(to right bottom, #aa00aa, #3333aa)'
              }}>
              Register
            </mui.Button>
          </div>

          <div className="Link-out">
            <mui.Link href='/login'>Already have an account? Login</mui.Link>
          </div>

        </mui.Box>
      </div>
    );
  }
}

export default Register;